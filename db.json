{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/assets/img/2018-11-20-lunchpad.jpeg","path":"assets/img/2018-11-20-lunchpad.jpeg","modified":0,"renderable":0},{"_id":"source/assets/img/avatar.jpg","path":"assets/img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/2019-01-13-emq-node.png","path":"assets/img/2019-01-13-emq-node.png","modified":0,"renderable":0},{"_id":"source/assets/img/background-cover.jpg","path":"assets/img/background-cover.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/favicon.png","path":"assets/img/favicon.png","modified":0,"renderable":0},{"_id":"source/assets/img/qrcode.jpg","path":"assets/img/qrcode.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/food/2018-11-10-d.jpg","path":"assets/img/food/2018-11-10-d.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/food/2018-11-10-l.jpg","path":"assets/img/food/2018-11-10-l.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/food/2018-11-13-d.jpg","path":"assets/img/food/2018-11-13-d.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/food/2018-11-14-d.jpg","path":"assets/img/food/2018-11-14-d.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/food/2018-11-17-d.jpg","path":"assets/img/food/2018-11-17-d.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/sort/bubbleSort.png","path":"assets/img/sort/bubbleSort.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/2018-10-01-scala-learning.markdown","hash":"1af931ef29e60148c72327c0e88f9603b773f369","modified":1598542110026},{"_id":"source/_posts/2018-10-13-cenos7-install-coturn.markdown","hash":"9f61122f6f957c0d2cfe7dd8929807ac5c11e90e","modified":1598542110027},{"_id":"source/_posts/2018-11-17-food-share.markdown","hash":"f6925509693b78288d5ddf1c9760b200ff31e0aa","modified":1598542110027},{"_id":"source/_posts/2018-11-20-change-mac-lunchpad.markdown","hash":"0e4bcafa1832e3ef04a2094c0c380743f5db4fa0","modified":1598542110027},{"_id":"source/_posts/2019-01-13-centos-install-emqttd-cluster.markdown","hash":"f97c4ca891f8e9b191309453126319d6fd836833","modified":1598542110028},{"_id":"source/_posts/2019-11-13-npm-set-taobao-repo.markdown","hash":"865cefa7acb10d2531c5d25eb9f451e13313d5b2","modified":1598542110029},{"_id":"source/_posts/2019-12-12-top-ten-sorting-algorithms.markdown","hash":"d4d986c1ca6753bef964ed0792078db339695925","modified":1598542110029},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1598356812073},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1598357050271},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1598357050272},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1598357050272},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1598357050275},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1598357050271},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1598357050272},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1598357050272},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1598357050272},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1598357050272},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1598357050272},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1598357050272},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1598357050272},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1598357050272},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1598357050272},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1598357050273},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1598357050276},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1598357050273},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1598357050273},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1598357050273},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1598357050275},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1598357050275},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1598357050275},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1598357050275},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1598357050275},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1598357050275},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1598357050276},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1598357050286},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1598357050277},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1598357050275},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1598357050286},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1598357050286},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1598357050287},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1598357050287},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1598357050287},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1598357050287},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1598357050288},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1598357050273},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1598357050288},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1598357050273},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1598357050273},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1598357050288},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1598357050273},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1598357050273},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1598357050273},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1598357050273},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1598357050274},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1598357050274},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1598357050274},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1598357050274},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1598357050288},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1598357050275},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1598357050275},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1598357050275},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1598357050275},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1598357050275},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1598357050276},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1598357050276},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1598357050276},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1598357050276},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1598357050276},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1598357050276},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1598357050276},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1598357050277},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1598357050277},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1598357050277},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1598357050277},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1598357050277},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1598357050279},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1598357050278},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1598357050281},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1598357050287},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1598357050287},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1598357050287},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1598357050287},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1598357050287},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1598357050274},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1598357050274},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1598357050287},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1598357050274},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1598357050274},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1598357050274},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1598357050274},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1598357050281},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1598357050280},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1598357050286},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1598542998654},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1598542998654},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1598542998654},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1598542998656},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1598542998656},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1598542998656},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1598542998656},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1598542998656},{"_id":"themes/next/_config.yml","hash":"ccd41ed5fc3027f81834c30fe4b67c0dac742dea","modified":1607693657167},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1598542998657},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1598542998660},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1598542998672},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1598542998654},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1598542998654},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1598542998655},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1598542998655},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1598542998655},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1598542998655},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1598542998655},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1598542998655},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1598542998656},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1598542998656},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1598542998656},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1598542998657},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1598542998657},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1598542998657},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1598542998657},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1598542998658},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1598542998658},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1598542998658},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1598542998658},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1598542998658},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1598542998660},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1598542998660},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1598542998660},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1598542998660},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1598542998660},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1598542998661},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1598542998661},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1598542998661},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1598542998661},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1598542998661},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1598542998661},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1598542998661},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1598542998661},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1598542998661},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1598542998661},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1598542998662},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1598542998662},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1598542998662},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1598542998662},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1598542998662},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1598542998662},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1598542998662},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1598542998662},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1598542998672},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1598542998672},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1598542998672},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1598542998672},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1598542998672},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1598542998672},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1598542998678},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1598542998655},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1598542998655},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1598542998655},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1598542998655},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1598542998658},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1598542998658},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1598542998659},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1598542998659},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1598542998659},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1598542998659},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1598542998659},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1598542998659},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1598542998659},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1598542998659},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1598542998660},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1598542998660},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1598542998660},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1598542998663},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1598542998663},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1598542998663},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1598542998663},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1607693657178},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1598542998664},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1598542998664},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1598542998665},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1598542998666},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1598542998666},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1598542998666},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1598542998666},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1598542998666},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1598542998669},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1598542998670},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1598542998670},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1598542998670},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1598542998672},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1598542998674},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1598542998677},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1598542998677},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1598542998677},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1598542998677},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1598542998678},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1598542998678},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1598542998678},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1598542998678},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1598542998678},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1598542998678},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1598542998678},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1598542998678},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1598542998679},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1598542998679},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1598542998679},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1598542998679},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1598542998679},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1598542998679},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1598542998680},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1598542998696},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1598542998701},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1598542998701},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1598542998701},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1598542998701},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1598542998702},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1598542998702},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1598542998702},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1598542998702},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1598542998702},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1598542998703},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1598542998703},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1598542998703},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1598542998703},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1598542998703},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1598542998704},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1598542998704},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1598542998704},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1598542998704},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1598542998704},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1598542998705},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1598542998705},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1598542998663},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1598542998663},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1598542998663},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1598542998664},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1598542998664},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1598542998664},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1598542998664},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1598542998664},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1598542998664},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1598542998664},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1598542998665},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1598542998665},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1598542998664},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1598542998665},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1598542998665},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1598542998665},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1598542998665},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1598542998665},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1598542998666},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1598542998666},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1598542998666},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1598542998666},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1598542998666},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1598542998667},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1598542998667},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1598542998668},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1598542998668},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1598542998669},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1598542998669},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1598542998669},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1598542998669},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1598542998669},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1598542998669},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1598542998670},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1598542998670},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1598542998670},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1598542998670},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1598542998670},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1598542998670},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1598542998671},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1598542998671},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1598542998671},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1598542998671},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1598542998671},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1598542998671},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1598542998671},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1598542998672},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1598542998671},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1598542998673},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1598542998673},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1598542998673},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1598542998673},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1598542998673},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1598542998673},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1598542998673},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1598542998673},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1598542998673},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1598542998674},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1598542998674},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1598542998700},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1598542998700},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1598542998700},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1598542998700},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1598542998701},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1598542998704},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1598542998704},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1598542998706},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1598542998707},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1598542998680},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1598542998680},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1598542998680},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1598542998690},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1598542998692},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1598542998692},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1598542998694},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1598542998694},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1598542998694},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1598542998695},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1598542998695},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1598542998695},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1598542998695},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1598542998696},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1598542998697},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1598542998698},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1598542998698},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1598542998698},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1598542998698},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1598542998698},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1598542998698},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1598542998698},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1598542998698},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1598542998698},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1598542998699},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1598542998699},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1598542998700},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1598542998700},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1598542998700},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1598542998700},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1598542998700},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1598542998700},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1598542998705},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1598542998706},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1598542998680},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1598542998680},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1598542998680},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1598542998680},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1598542998680},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1598542998688},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1598542998688},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1598542998688},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1598542998688},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1598542998688},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1598542998689},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1598542998689},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1598542998689},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1598542998689},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1598542998690},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1598542998690},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1598542998690},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1598542998690},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1598542998690},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1598542998690},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1598542998691},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1598542998691},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1598542998691},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1598542998691},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1598542998691},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1598542998691},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1598542998691},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1598542998691},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1598542998692},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1598542998692},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1598542998692},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1598542998692},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1598542998692},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1598542998693},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1598542998693},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1598542998693},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1598542998693},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1598542998694},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1598542998694},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1598542998694},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1598542998694},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1598542998694},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1598542998695},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1598542998695},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1598542998695},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1598542998696},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1598542998696},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1598542998696},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1598542998696},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1598542998696},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1598542998696},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1598542998696},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1598542998706},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1598542998706},{"_id":"source/assets/img/avatar.jpg","hash":"2369952a8b3b7f69b0cb7705d8c693126cc843b9","modified":1598544654352},{"_id":"source/assets/img/2019-01-13-emq-node.png","hash":"4a8a3f2739570d746464cc8f975556118a1f67e2","modified":1598544654367},{"_id":"source/assets/img/favicon.png","hash":"37914f73a70e87f96a8ef147e0d206b58e534972","modified":1598544654352},{"_id":"source/assets/img/qrcode.jpg","hash":"045fd02f17a2803205e2af94ab55bb7e149d9280","modified":1598544654348},{"_id":"source/assets/img/background-cover.jpg","hash":"185bc6df754249ae2e5803c8be6fb0935d1f4b05","modified":1598544654348},{"_id":"source/assets/img/2018-11-20-lunchpad.jpeg","hash":"0d7ae7313c15cf80cdb0b39c19d1d500f4eb06bc","modified":1598544654366},{"_id":"source/assets/img/sort/bubbleSort.png","hash":"e3316329fee9b7906fa857af53e2dcd053a039cd","modified":1598544654349},{"_id":"source/assets/img/food/2018-11-10-d.jpg","hash":"25a0be837e8c95bd4a97876c862a4e79b5be3b28","modified":1598544654361},{"_id":"source/assets/img/food/2018-11-17-d.jpg","hash":"d3af5bfa9f33d8f5692ef1fe5f602a8353793a8a","modified":1598544654354},{"_id":"source/assets/img/food/2018-11-13-d.jpg","hash":"cad9d7d082ba55ade380444936931de29758a277","modified":1598544654355},{"_id":"source/assets/img/food/2018-11-14-d.jpg","hash":"398eb6cd6a25677f7cf6cafb75fe5ef8ee0fc21b","modified":1598544654358},{"_id":"source/assets/img/food/2018-11-10-l.jpg","hash":"f1e18c2195e11be80ee7e579ae5fc0c519dc73d6","modified":1598544654362},{"_id":"public/2019/10/13/npm-set-taobao-repo.html","hash":"59cc5059c9167cbd48cba790bdfd71c711073426","modified":1607694154548},{"_id":"public/2019/01/13/centos-install-emqttd-cluster.html","hash":"bdb29468807beddf6a260e5e6d84cf7d4a6cc0db","modified":1607694154548},{"_id":"public/2018/11/20/change-mac-lunchpad.html","hash":"33fb85add3a0ad22a6544007c160e691dadf5c7d","modified":1607694154548},{"_id":"public/2018/10/13/cenos7-install-coturn.html","hash":"565cc938f66f3cfbfaeba73a4d609b407e633d70","modified":1607694154548},{"_id":"public/2018/10/01/scala-learning.html","hash":"2bb670040c237a24d9eacd422116a748752bfcc8","modified":1607694154548},{"_id":"public/archives/index.html","hash":"c8a0537b088c04c93bcda6224808416fea012115","modified":1607694154548},{"_id":"public/archives/2018/index.html","hash":"3b4f5efe0c826ce4f9d54b8df6610bccea79cd9b","modified":1607694154548},{"_id":"public/archives/2018/10/index.html","hash":"f5579acafaec6cf833bca4f18c8e2b40c2dea589","modified":1607694154548},{"_id":"public/archives/2018/11/index.html","hash":"a0109b4399d9f95738485bf5e49cd20851b173fb","modified":1607694154548},{"_id":"public/archives/2019/index.html","hash":"b70b42ac708a47b52a1f63276f02d350da3f3599","modified":1607694154548},{"_id":"public/archives/2019/01/index.html","hash":"e8913f56ec92c15cb92e1d87ab1bfbb050b3dfbe","modified":1607694154548},{"_id":"public/archives/2019/10/index.html","hash":"c83f93248a28b34d995e5ed7b1946004929b8092","modified":1607694154548},{"_id":"public/index.html","hash":"448ef1d97e030ea0b892dff3eb8e50b4b9f6f055","modified":1607694154548},{"_id":"public/tags/Scala/index.html","hash":"d1b880c5ae02913efb737ee2ae1a4dab811862ba","modified":1607694154548},{"_id":"public/tags/WebRtc/index.html","hash":"956d4bce389310a242939f8e865c5f9aac3a8665","modified":1607694154548},{"_id":"public/tags/Tools/index.html","hash":"44b2da4244c9c039b0f6c99994de2b9367756697","modified":1607694154548},{"_id":"public/tags/Emq/index.html","hash":"4197c832c5ba0b87bda55861e2052f16d4ad9c8b","modified":1607694154548},{"_id":"public/tags/NodeJs/index.html","hash":"40a194b3980f9298d7712ccadf5049d40b56a316","modified":1607694154548},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1598544863608},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1598544863608},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1598544863608},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1598544863608},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1598544863608},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1598544863608},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1598544863608},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1598544863608},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1598544863608},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1598544863608},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1607694154548},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1607694154548},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1607694154548},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1607694154548},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1607694154548},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1607694154548},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1607694154548},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1607694154548},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1607694154548},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1607694154548},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1607694154548},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1607694154548},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1607694154548},{"_id":"public/assets/img/avatar.jpg","hash":"2369952a8b3b7f69b0cb7705d8c693126cc843b9","modified":1607694154548},{"_id":"public/assets/img/2019-01-13-emq-node.png","hash":"4a8a3f2739570d746464cc8f975556118a1f67e2","modified":1607694154548},{"_id":"public/assets/img/favicon.png","hash":"37914f73a70e87f96a8ef147e0d206b58e534972","modified":1607694154548},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1607694154548},{"_id":"public/assets/img/qrcode.jpg","hash":"045fd02f17a2803205e2af94ab55bb7e149d9280","modified":1607694154548},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1598544863608},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1607694154548},{"_id":"public/assets/img/background-cover.jpg","hash":"185bc6df754249ae2e5803c8be6fb0935d1f4b05","modified":1607694154548},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1607694154548},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1598544863608},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1598544863608},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1598544863608},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1598544863608},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1598544863608},{"_id":"public/css/main.css","hash":"82d0712761f77e2db114df1400bbf671b7240b54","modified":1607694154548},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1598544863608},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1598544863608},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1598544863608},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1607694154548},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1607694154548},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1607694154548},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1607694154548},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1607694154548},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1598544863608},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1598544863608},{"_id":"public/assets/img/2018-11-20-lunchpad.jpeg","hash":"0d7ae7313c15cf80cdb0b39c19d1d500f4eb06bc","modified":1607694154548},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1598544863608},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1607694154548},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1598544863608},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1607694154548},{"_id":"public/assets/img/sort/bubbleSort.png","hash":"e3316329fee9b7906fa857af53e2dcd053a039cd","modified":1607694154548},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1607694154548},{"_id":"public/assets/img/food/2018-11-10-d.jpg","hash":"25a0be837e8c95bd4a97876c862a4e79b5be3b28","modified":1607694154548},{"_id":"public/assets/img/food/2018-11-17-d.jpg","hash":"d3af5bfa9f33d8f5692ef1fe5f602a8353793a8a","modified":1607694154548},{"_id":"public/assets/img/food/2018-11-13-d.jpg","hash":"cad9d7d082ba55ade380444936931de29758a277","modified":1607694154548},{"_id":"public/assets/img/food/2018-11-14-d.jpg","hash":"398eb6cd6a25677f7cf6cafb75fe5ef8ee0fc21b","modified":1607694154548},{"_id":"public/assets/img/food/2018-11-10-l.jpg","hash":"f1e18c2195e11be80ee7e579ae5fc0c519dc73d6","modified":1607694154548},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1607694154548},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1607694154548},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1607694154548},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1607694154548}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Scala常用集合运算符学习","date":"2018-10-01T14:21:49.000Z","_content":"> `Scala`中很多的集合操作符，学会了他们在平时的编程中可以节约很多的时间。这其中的一些操作和`RxJava`中的一些操作符十分相似。\n\n## 1.foreach\n`foreach`可以直接遍历一个集合中的所有元素，没有返回值。\n栗子：\n```scala\n//先定义个List\nval names=List(\"a\",\"b\",\"c\")\nnames.foreach(name =>{\n      println(name)\n})\n/*\n输出结果\na\nb\nc\n*/\n```\n\n## 2.map\n`map`的功能有点和`foreach`相似，但是`map`有返回值，他可以将一个集合中的元素逐一取出，在处理过后再重新组合成原来集合的类型并返回。\n举个栗子：\n```scala\n//先定义个List\nval names=List(\"a\",\"b\",\"c\")\nprintln(names.map(_.toUpperCase))\n//打印出结果 List(A, B, C)\n//可见map将函数中的每个字母取出去进行大小写转换，然后又重新组合成原有的数据类型List集合并返回。\n```\n\n## 3.flatten\n\n`flatten`的作用是讲一个嵌套的结构展开。\n话不多说，老板来个栗子！\n```scala\n//我们分别定义了List,Set,Map集合，将其嵌套在一个List中，在使用flatten函数将其展开\nval aNames = List(\"a\",\"b\")\nval bNames = Set(\"c\",\"d\")\nval cNames = Map((\"d\"->\"dn\"),(\"e\"->\"en\"))\nval names = List(aNames,bNames,cNames)\nprintln(names.flatten)\n\n//打印结果\n//List(a, b, c, d, (d,dn), (e,en))\n```\n\n## 4.zip\n看到`zip`心里想着这货不是压缩包的后缀嘛，顾名思义就是讲两个集合打包，就是合并起来的意思，这个的合并是指每个对应的元素合并起来，形成一个包含两个元素的新元素，可能有点难理解，直接看栗子。\n```scala\nList('a,'b,'c,'d).zip(List(1,2,3,4))\n//打印结果\n//List(('a,1), ('b,2), ('c,3), ('d,4))\n```\n\n## 5.zipWithIndex\n`zipWithIndex`是指和`zip`有些类似，是讲一个列表遍历出来，与当前元素在集合中的位置（即Index）合并在一起，形成一个新的元素。\n```scala\nList(2,3,4,5).zipWithIndex\n//打印结果\n//List((2,0), (3,1), (4,2), (5,3))\n```\n\n## 6.flatmap\n`flatmap`函数的功能是`map`和`flatten`的结合体，先将嵌套的结构，接收一个可以处理嵌套列表的函数（我的理解是这个函数需要有返回值，例如前面介绍的`map`），返回一个经过处理的原类型的集合。\n```scala\n//这里我将两个List嵌套起来，然后先经过flatMap取到x（x即为names中嵌套的集合：aNames和bNames），然后经过map函数，遍历拿到的x集合，将其转换为大写字母，返回给flatMap函数，进行合并。\nval aNames = List(\"a\",\"b\")\nval bNames = List(\"c\",\"d\")\nval names = List(aNames,bNames)\nval result = names.flatMap(x =>{\n  x.map(y=>{\n    y.toUpperCase()\n  })\n})\nprintln(result)\n//打印结果如下\n//List(A, B, C, D)\n```\n## 7.filter\n`filter`顾名思义就是过滤器的意思，接收一个返回Boolean的函数，true和保留，false过滤掉。\n```scala\n//我们定义了一个几个，filter函数中返回的是各个元素是否为偶数，是偶数返回true，则保留，反之过滤。\nval ages = List(1,2,3,4,5,6,7)\nprintln(ages.filter(age =>{age%2 == 0}))\n//打印结果\n//List(2, 4, 6)\n```\n\n\n> 以上是我暂时总结的7种集合操作符，理解之后灵活运用可以节省很多时间，但是这些函数的使用都需要有lambda表达式的基础，今天写到这里，如果你发现了一些错误还望海涵，并严厉指出，不胜感激！\n","source":"_posts/2018-10-01-scala-learning.markdown","raw":"---\nlayout: post\ntitle:  \"Scala常用集合运算符学习\"\ndate:   2018-10-01 22:21:49\ntags: Scala\n---\n> `Scala`中很多的集合操作符，学会了他们在平时的编程中可以节约很多的时间。这其中的一些操作和`RxJava`中的一些操作符十分相似。\n\n## 1.foreach\n`foreach`可以直接遍历一个集合中的所有元素，没有返回值。\n栗子：\n```scala\n//先定义个List\nval names=List(\"a\",\"b\",\"c\")\nnames.foreach(name =>{\n      println(name)\n})\n/*\n输出结果\na\nb\nc\n*/\n```\n\n## 2.map\n`map`的功能有点和`foreach`相似，但是`map`有返回值，他可以将一个集合中的元素逐一取出，在处理过后再重新组合成原来集合的类型并返回。\n举个栗子：\n```scala\n//先定义个List\nval names=List(\"a\",\"b\",\"c\")\nprintln(names.map(_.toUpperCase))\n//打印出结果 List(A, B, C)\n//可见map将函数中的每个字母取出去进行大小写转换，然后又重新组合成原有的数据类型List集合并返回。\n```\n\n## 3.flatten\n\n`flatten`的作用是讲一个嵌套的结构展开。\n话不多说，老板来个栗子！\n```scala\n//我们分别定义了List,Set,Map集合，将其嵌套在一个List中，在使用flatten函数将其展开\nval aNames = List(\"a\",\"b\")\nval bNames = Set(\"c\",\"d\")\nval cNames = Map((\"d\"->\"dn\"),(\"e\"->\"en\"))\nval names = List(aNames,bNames,cNames)\nprintln(names.flatten)\n\n//打印结果\n//List(a, b, c, d, (d,dn), (e,en))\n```\n\n## 4.zip\n看到`zip`心里想着这货不是压缩包的后缀嘛，顾名思义就是讲两个集合打包，就是合并起来的意思，这个的合并是指每个对应的元素合并起来，形成一个包含两个元素的新元素，可能有点难理解，直接看栗子。\n```scala\nList('a,'b,'c,'d).zip(List(1,2,3,4))\n//打印结果\n//List(('a,1), ('b,2), ('c,3), ('d,4))\n```\n\n## 5.zipWithIndex\n`zipWithIndex`是指和`zip`有些类似，是讲一个列表遍历出来，与当前元素在集合中的位置（即Index）合并在一起，形成一个新的元素。\n```scala\nList(2,3,4,5).zipWithIndex\n//打印结果\n//List((2,0), (3,1), (4,2), (5,3))\n```\n\n## 6.flatmap\n`flatmap`函数的功能是`map`和`flatten`的结合体，先将嵌套的结构，接收一个可以处理嵌套列表的函数（我的理解是这个函数需要有返回值，例如前面介绍的`map`），返回一个经过处理的原类型的集合。\n```scala\n//这里我将两个List嵌套起来，然后先经过flatMap取到x（x即为names中嵌套的集合：aNames和bNames），然后经过map函数，遍历拿到的x集合，将其转换为大写字母，返回给flatMap函数，进行合并。\nval aNames = List(\"a\",\"b\")\nval bNames = List(\"c\",\"d\")\nval names = List(aNames,bNames)\nval result = names.flatMap(x =>{\n  x.map(y=>{\n    y.toUpperCase()\n  })\n})\nprintln(result)\n//打印结果如下\n//List(A, B, C, D)\n```\n## 7.filter\n`filter`顾名思义就是过滤器的意思，接收一个返回Boolean的函数，true和保留，false过滤掉。\n```scala\n//我们定义了一个几个，filter函数中返回的是各个元素是否为偶数，是偶数返回true，则保留，反之过滤。\nval ages = List(1,2,3,4,5,6,7)\nprintln(ages.filter(age =>{age%2 == 0}))\n//打印结果\n//List(2, 4, 6)\n```\n\n\n> 以上是我暂时总结的7种集合操作符，理解之后灵活运用可以节省很多时间，但是这些函数的使用都需要有lambda表达式的基础，今天写到这里，如果你发现了一些错误还望海涵，并严厉指出，不胜感激！\n","slug":"scala-learning","published":1,"updated":"2020-08-27T15:28:30.026Z","comments":1,"photos":[],"link":"","_id":"ckecyu4m10000ke522x0bgke9","content":"<blockquote>\n<p><code>Scala</code>中很多的集合操作符，学会了他们在平时的编程中可以节约很多的时间。这其中的一些操作和<code>RxJava</code>中的一些操作符十分相似。</p>\n</blockquote>\n<h2 id=\"1-foreach\"><a href=\"#1-foreach\" class=\"headerlink\" title=\"1.foreach\"></a>1.foreach</h2><p><code>foreach</code>可以直接遍历一个集合中的所有元素，没有返回值。<br>栗子：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先定义个List</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> names=<span class=\"type\">List</span>(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">names.foreach(name =&gt;&#123;</span><br><span class=\"line\">      println(name)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出结果</span></span><br><span class=\"line\"><span class=\"comment\">a</span></span><br><span class=\"line\"><span class=\"comment\">b</span></span><br><span class=\"line\"><span class=\"comment\">c</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-map\"><a href=\"#2-map\" class=\"headerlink\" title=\"2.map\"></a>2.map</h2><p><code>map</code>的功能有点和<code>foreach</code>相似，但是<code>map</code>有返回值，他可以将一个集合中的元素逐一取出，在处理过后再重新组合成原来集合的类型并返回。<br>举个栗子：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先定义个List</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> names=<span class=\"type\">List</span>(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">println(names.map(_.toUpperCase))</span><br><span class=\"line\"><span class=\"comment\">//打印出结果 List(A, B, C)</span></span><br><span class=\"line\"><span class=\"comment\">//可见map将函数中的每个字母取出去进行大小写转换，然后又重新组合成原有的数据类型List集合并返回。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-flatten\"><a href=\"#3-flatten\" class=\"headerlink\" title=\"3.flatten\"></a>3.flatten</h2><p><code>flatten</code>的作用是讲一个嵌套的结构展开。<br>话不多说，老板来个栗子！</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们分别定义了List,Set,Map集合，将其嵌套在一个List中，在使用flatten函数将其展开</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> aNames = <span class=\"type\">List</span>(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> bNames = <span class=\"type\">Set</span>(<span class=\"string\">&quot;c&quot;</span>,<span class=\"string\">&quot;d&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> cNames = <span class=\"type\">Map</span>((<span class=\"string\">&quot;d&quot;</span>-&gt;<span class=\"string\">&quot;dn&quot;</span>),(<span class=\"string\">&quot;e&quot;</span>-&gt;<span class=\"string\">&quot;en&quot;</span>))</span><br><span class=\"line\"><span class=\"keyword\">val</span> names = <span class=\"type\">List</span>(aNames,bNames,cNames)</span><br><span class=\"line\">println(names.flatten)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//List(a, b, c, d, (d,dn), (e,en))</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-zip\"><a href=\"#4-zip\" class=\"headerlink\" title=\"4.zip\"></a>4.zip</h2><p>看到<code>zip</code>心里想着这货不是压缩包的后缀嘛，顾名思义就是讲两个集合打包，就是合并起来的意思，这个的合并是指每个对应的元素合并起来，形成一个包含两个元素的新元素，可能有点难理解，直接看栗子。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">List</span>(<span class=\"symbol\">&#x27;a</span>,<span class=\"symbol\">&#x27;b</span>,<span class=\"symbol\">&#x27;c</span>,<span class=\"symbol\">&#x27;d</span>).zip(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//List((&#x27;a,1), (&#x27;b,2), (&#x27;c,3), (&#x27;d,4))</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-zipWithIndex\"><a href=\"#5-zipWithIndex\" class=\"headerlink\" title=\"5.zipWithIndex\"></a>5.zipWithIndex</h2><p><code>zipWithIndex</code>是指和<code>zip</code>有些类似，是讲一个列表遍历出来，与当前元素在集合中的位置（即Index）合并在一起，形成一个新的元素。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">List</span>(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>).zipWithIndex</span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//List((2,0), (3,1), (4,2), (5,3))</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-flatmap\"><a href=\"#6-flatmap\" class=\"headerlink\" title=\"6.flatmap\"></a>6.flatmap</h2><p><code>flatmap</code>函数的功能是<code>map</code>和<code>flatten</code>的结合体，先将嵌套的结构，接收一个可以处理嵌套列表的函数（我的理解是这个函数需要有返回值，例如前面介绍的<code>map</code>），返回一个经过处理的原类型的集合。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里我将两个List嵌套起来，然后先经过flatMap取到x（x即为names中嵌套的集合：aNames和bNames），然后经过map函数，遍历拿到的x集合，将其转换为大写字母，返回给flatMap函数，进行合并。</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> aNames = <span class=\"type\">List</span>(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> bNames = <span class=\"type\">List</span>(<span class=\"string\">&quot;c&quot;</span>,<span class=\"string\">&quot;d&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> names = <span class=\"type\">List</span>(aNames,bNames)</span><br><span class=\"line\"><span class=\"keyword\">val</span> result = names.flatMap(x =&gt;&#123;</span><br><span class=\"line\">  x.map(y=&gt;&#123;</span><br><span class=\"line\">    y.toUpperCase()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"><span class=\"comment\">//打印结果如下</span></span><br><span class=\"line\"><span class=\"comment\">//List(A, B, C, D)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-filter\"><a href=\"#7-filter\" class=\"headerlink\" title=\"7.filter\"></a>7.filter</h2><p><code>filter</code>顾名思义就是过滤器的意思，接收一个返回Boolean的函数，true和保留，false过滤掉。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们定义了一个几个，filter函数中返回的是各个元素是否为偶数，是偶数返回true，则保留，反之过滤。</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> ages = <span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>)</span><br><span class=\"line\">println(ages.filter(age =&gt;&#123;age%<span class=\"number\">2</span> == <span class=\"number\">0</span>&#125;))</span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//List(2, 4, 6)</span></span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>以上是我暂时总结的7种集合操作符，理解之后灵活运用可以节省很多时间，但是这些函数的使用都需要有lambda表达式的基础，今天写到这里，如果你发现了一些错误还望海涵，并严厉指出，不胜感激！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><code>Scala</code>中很多的集合操作符，学会了他们在平时的编程中可以节约很多的时间。这其中的一些操作和<code>RxJava</code>中的一些操作符十分相似。</p>\n</blockquote>\n<h2 id=\"1-foreach\"><a href=\"#1-foreach\" class=\"headerlink\" title=\"1.foreach\"></a>1.foreach</h2><p><code>foreach</code>可以直接遍历一个集合中的所有元素，没有返回值。<br>栗子：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先定义个List</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> names=<span class=\"type\">List</span>(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">names.foreach(name =&gt;&#123;</span><br><span class=\"line\">      println(name)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出结果</span></span><br><span class=\"line\"><span class=\"comment\">a</span></span><br><span class=\"line\"><span class=\"comment\">b</span></span><br><span class=\"line\"><span class=\"comment\">c</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-map\"><a href=\"#2-map\" class=\"headerlink\" title=\"2.map\"></a>2.map</h2><p><code>map</code>的功能有点和<code>foreach</code>相似，但是<code>map</code>有返回值，他可以将一个集合中的元素逐一取出，在处理过后再重新组合成原来集合的类型并返回。<br>举个栗子：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先定义个List</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> names=<span class=\"type\">List</span>(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">println(names.map(_.toUpperCase))</span><br><span class=\"line\"><span class=\"comment\">//打印出结果 List(A, B, C)</span></span><br><span class=\"line\"><span class=\"comment\">//可见map将函数中的每个字母取出去进行大小写转换，然后又重新组合成原有的数据类型List集合并返回。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-flatten\"><a href=\"#3-flatten\" class=\"headerlink\" title=\"3.flatten\"></a>3.flatten</h2><p><code>flatten</code>的作用是讲一个嵌套的结构展开。<br>话不多说，老板来个栗子！</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们分别定义了List,Set,Map集合，将其嵌套在一个List中，在使用flatten函数将其展开</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> aNames = <span class=\"type\">List</span>(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> bNames = <span class=\"type\">Set</span>(<span class=\"string\">&quot;c&quot;</span>,<span class=\"string\">&quot;d&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> cNames = <span class=\"type\">Map</span>((<span class=\"string\">&quot;d&quot;</span>-&gt;<span class=\"string\">&quot;dn&quot;</span>),(<span class=\"string\">&quot;e&quot;</span>-&gt;<span class=\"string\">&quot;en&quot;</span>))</span><br><span class=\"line\"><span class=\"keyword\">val</span> names = <span class=\"type\">List</span>(aNames,bNames,cNames)</span><br><span class=\"line\">println(names.flatten)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//List(a, b, c, d, (d,dn), (e,en))</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-zip\"><a href=\"#4-zip\" class=\"headerlink\" title=\"4.zip\"></a>4.zip</h2><p>看到<code>zip</code>心里想着这货不是压缩包的后缀嘛，顾名思义就是讲两个集合打包，就是合并起来的意思，这个的合并是指每个对应的元素合并起来，形成一个包含两个元素的新元素，可能有点难理解，直接看栗子。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">List</span>(<span class=\"symbol\">&#x27;a</span>,<span class=\"symbol\">&#x27;b</span>,<span class=\"symbol\">&#x27;c</span>,<span class=\"symbol\">&#x27;d</span>).zip(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//List((&#x27;a,1), (&#x27;b,2), (&#x27;c,3), (&#x27;d,4))</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-zipWithIndex\"><a href=\"#5-zipWithIndex\" class=\"headerlink\" title=\"5.zipWithIndex\"></a>5.zipWithIndex</h2><p><code>zipWithIndex</code>是指和<code>zip</code>有些类似，是讲一个列表遍历出来，与当前元素在集合中的位置（即Index）合并在一起，形成一个新的元素。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">List</span>(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>).zipWithIndex</span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//List((2,0), (3,1), (4,2), (5,3))</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-flatmap\"><a href=\"#6-flatmap\" class=\"headerlink\" title=\"6.flatmap\"></a>6.flatmap</h2><p><code>flatmap</code>函数的功能是<code>map</code>和<code>flatten</code>的结合体，先将嵌套的结构，接收一个可以处理嵌套列表的函数（我的理解是这个函数需要有返回值，例如前面介绍的<code>map</code>），返回一个经过处理的原类型的集合。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里我将两个List嵌套起来，然后先经过flatMap取到x（x即为names中嵌套的集合：aNames和bNames），然后经过map函数，遍历拿到的x集合，将其转换为大写字母，返回给flatMap函数，进行合并。</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> aNames = <span class=\"type\">List</span>(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;b&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> bNames = <span class=\"type\">List</span>(<span class=\"string\">&quot;c&quot;</span>,<span class=\"string\">&quot;d&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> names = <span class=\"type\">List</span>(aNames,bNames)</span><br><span class=\"line\"><span class=\"keyword\">val</span> result = names.flatMap(x =&gt;&#123;</span><br><span class=\"line\">  x.map(y=&gt;&#123;</span><br><span class=\"line\">    y.toUpperCase()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">println(result)</span><br><span class=\"line\"><span class=\"comment\">//打印结果如下</span></span><br><span class=\"line\"><span class=\"comment\">//List(A, B, C, D)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-filter\"><a href=\"#7-filter\" class=\"headerlink\" title=\"7.filter\"></a>7.filter</h2><p><code>filter</code>顾名思义就是过滤器的意思，接收一个返回Boolean的函数，true和保留，false过滤掉。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们定义了一个几个，filter函数中返回的是各个元素是否为偶数，是偶数返回true，则保留，反之过滤。</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> ages = <span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>)</span><br><span class=\"line\">println(ages.filter(age =&gt;&#123;age%<span class=\"number\">2</span> == <span class=\"number\">0</span>&#125;))</span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//List(2, 4, 6)</span></span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>以上是我暂时总结的7种集合操作符，理解之后灵活运用可以节省很多时间，但是这些函数的使用都需要有lambda表达式的基础，今天写到这里，如果你发现了一些错误还望海涵，并严厉指出，不胜感激！</p>\n</blockquote>\n"},{"layout":"post","title":"Centos7安装WebRtc打洞服务器Coturn方法","date":"2018-10-13T14:21:49.000Z","_content":"> 在使用WebRtc时，我们需要打洞服务器来打洞两部设备之间的通信，这里我们采用Coturn库。由于Turn服务器是Stun的一个拓展，Coturn包括了Turn和Stun，所有我们只需要部署Coturn就可以完成WebRtc的打洞环节啦。\n\n## 克隆并安装\n```bash\ngit clone https://github.com/coturn/coturn \ncd coturn \n./configure \nmake \nsudo make install\n```\n如果你的电脑上没有安装LibEvent2，需要先安装`libevent-devel`和`openssl-devel`\n```bash\n# Install the libevent-devel rpm package:\nyum install libevent-devel openssl-devel\n```\n安装好之后使用`which turnserver`确保安装成功\n```bash\n[root@localhost local]# which turnserver\n/usr/local/bin/turnserver\n```\n## 设置配置文件\n在Coturn编译完成好之后会自动生成一个配置文件的模板，在`/usr/local/etc/turnserver.conf.default`，感兴趣的小伙伴可以仔细查看里面每一个配置项的含义。这里我们在新建一个新的配置文件`/usr/local/etc/turnserver.conf`，在这个里面编辑好之后使用`turnserver`命令会自动寻找到conf文件的位置。分享一个简单的配置文件的格式：\n```\nrelay-device=enp1s0f0  //绑定的网卡的设备号\nlistening-ip=x.x.x.x //内网IP，阿里云腾讯云的机器一般是内网的IP，没有填外网IP也可以\nlistening-port=3478 \nrelay-ip=x.x.x.x  //内网IP,阿里云腾讯云的机器一般是内网的IP，没有填外网IP也可以\nexternal-ip=x.x.x.x  //外网IP，就是外网访问本台服务器的IP地址，这个就是提供给webrtc客户端来传递数据的IP\nrelay-threads=500 \nlt-cred-mech    //这个要填上，否则不支持webrtc\npidfile=\"/var/run/turnserver.pid\" \nmin-port=49152  //虚拟给客户端的端口号，min-max的范围选取要能支撑起你的服务，要不然会出现转发服务器不够用的情况\nmax-port=65535 \nuser=xxx:123456     //xxx会用户名，123456是密码\nrealm=AnHui\n```\n保存好之后使用命令\n```bash\nturnserver -o -a -f \n```\n即可启动Coturn。\n## 验证Coturn的可用性\n有一个专门的网站可以检查打洞服务器的正确配置与否。\n[Trickle ICE](https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/)\n### 验证stun\n输入 `stun:x.x.x.x:3478`\n得到结果\n```\nTime\tComponent\tType\tFoundation\tProtocol\tAddress\tPort\tPriority\n0.002\t1\thost\t886443856\tudp\t10.80.1.131\t49469\t126 | 32542 | 255\n0.104\t1\thost\t2052453280\ttcp\t10.80.1.131\t9\t90 | 32542 | 255\n0.288\t1\tsrflx\t2643034245\tudp\t112.27.203.124\t49469\t100 | 32542 | 255\n0.312\tDone\n0.313\n```\n看到`srflx`后面就是你的电脑的外网IP，表示打洞成功。\n### 验证turn\n输入 `turn:x.x.x.x:3478`,`username:`,`password`\n得到结果\n```\n0.003\t1\thost\t886443856\tudp\t10.80.1.131\t55831\t126 | 32542 | 255\n0.104\t1\thost\t2052453280\ttcp\t10.80.1.131\t9\t90 | 32542 | 255\n0.534\t1\tsrflx\t2643034245\tudp\t112.27.203.124\t55831\t100 | 32542 | 255\n0.614\t1\trelay\t3676437432\tudp\tx.x.x.x\t56631\t2 | 32542 | 255\n0.878\tDone\n0.880\n```\n看到`relay`后面就是你的服务器的外网IP，表示可以使用Coturn的turn服务器进行转发。同时也可以看见srflx，这说明了turn服务是stun的一个拓展，turn和stun是包含的关系。\n\n> Coturn的部署就简单的介绍到这里，如有不对的地方，还望指正，谢谢！\n","source":"_posts/2018-10-13-cenos7-install-coturn.markdown","raw":"---\nlayout: post\ntitle:  \"Centos7安装WebRtc打洞服务器Coturn方法\"\ndate:   2018-10-13 22:21:49\ntags: WebRtc\n---\n> 在使用WebRtc时，我们需要打洞服务器来打洞两部设备之间的通信，这里我们采用Coturn库。由于Turn服务器是Stun的一个拓展，Coturn包括了Turn和Stun，所有我们只需要部署Coturn就可以完成WebRtc的打洞环节啦。\n\n## 克隆并安装\n```bash\ngit clone https://github.com/coturn/coturn \ncd coturn \n./configure \nmake \nsudo make install\n```\n如果你的电脑上没有安装LibEvent2，需要先安装`libevent-devel`和`openssl-devel`\n```bash\n# Install the libevent-devel rpm package:\nyum install libevent-devel openssl-devel\n```\n安装好之后使用`which turnserver`确保安装成功\n```bash\n[root@localhost local]# which turnserver\n/usr/local/bin/turnserver\n```\n## 设置配置文件\n在Coturn编译完成好之后会自动生成一个配置文件的模板，在`/usr/local/etc/turnserver.conf.default`，感兴趣的小伙伴可以仔细查看里面每一个配置项的含义。这里我们在新建一个新的配置文件`/usr/local/etc/turnserver.conf`，在这个里面编辑好之后使用`turnserver`命令会自动寻找到conf文件的位置。分享一个简单的配置文件的格式：\n```\nrelay-device=enp1s0f0  //绑定的网卡的设备号\nlistening-ip=x.x.x.x //内网IP，阿里云腾讯云的机器一般是内网的IP，没有填外网IP也可以\nlistening-port=3478 \nrelay-ip=x.x.x.x  //内网IP,阿里云腾讯云的机器一般是内网的IP，没有填外网IP也可以\nexternal-ip=x.x.x.x  //外网IP，就是外网访问本台服务器的IP地址，这个就是提供给webrtc客户端来传递数据的IP\nrelay-threads=500 \nlt-cred-mech    //这个要填上，否则不支持webrtc\npidfile=\"/var/run/turnserver.pid\" \nmin-port=49152  //虚拟给客户端的端口号，min-max的范围选取要能支撑起你的服务，要不然会出现转发服务器不够用的情况\nmax-port=65535 \nuser=xxx:123456     //xxx会用户名，123456是密码\nrealm=AnHui\n```\n保存好之后使用命令\n```bash\nturnserver -o -a -f \n```\n即可启动Coturn。\n## 验证Coturn的可用性\n有一个专门的网站可以检查打洞服务器的正确配置与否。\n[Trickle ICE](https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/)\n### 验证stun\n输入 `stun:x.x.x.x:3478`\n得到结果\n```\nTime\tComponent\tType\tFoundation\tProtocol\tAddress\tPort\tPriority\n0.002\t1\thost\t886443856\tudp\t10.80.1.131\t49469\t126 | 32542 | 255\n0.104\t1\thost\t2052453280\ttcp\t10.80.1.131\t9\t90 | 32542 | 255\n0.288\t1\tsrflx\t2643034245\tudp\t112.27.203.124\t49469\t100 | 32542 | 255\n0.312\tDone\n0.313\n```\n看到`srflx`后面就是你的电脑的外网IP，表示打洞成功。\n### 验证turn\n输入 `turn:x.x.x.x:3478`,`username:`,`password`\n得到结果\n```\n0.003\t1\thost\t886443856\tudp\t10.80.1.131\t55831\t126 | 32542 | 255\n0.104\t1\thost\t2052453280\ttcp\t10.80.1.131\t9\t90 | 32542 | 255\n0.534\t1\tsrflx\t2643034245\tudp\t112.27.203.124\t55831\t100 | 32542 | 255\n0.614\t1\trelay\t3676437432\tudp\tx.x.x.x\t56631\t2 | 32542 | 255\n0.878\tDone\n0.880\n```\n看到`relay`后面就是你的服务器的外网IP，表示可以使用Coturn的turn服务器进行转发。同时也可以看见srflx，这说明了turn服务是stun的一个拓展，turn和stun是包含的关系。\n\n> Coturn的部署就简单的介绍到这里，如有不对的地方，还望指正，谢谢！\n","slug":"cenos7-install-coturn","published":1,"updated":"2020-08-27T15:28:30.027Z","comments":1,"photos":[],"link":"","_id":"ckecyu4m70001ke52bp8cgur8","content":"<blockquote>\n<p>在使用WebRtc时，我们需要打洞服务器来打洞两部设备之间的通信，这里我们采用Coturn库。由于Turn服务器是Stun的一个拓展，Coturn包括了Turn和Stun，所有我们只需要部署Coturn就可以完成WebRtc的打洞环节啦。</p>\n</blockquote>\n<h2 id=\"克隆并安装\"><a href=\"#克隆并安装\" class=\"headerlink\" title=\"克隆并安装\"></a>克隆并安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/coturn/coturn </span><br><span class=\"line\"><span class=\"built_in\">cd</span> coturn </span><br><span class=\"line\">./configure </span><br><span class=\"line\">make </span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>如果你的电脑上没有安装LibEvent2，需要先安装<code>libevent-devel</code>和<code>openssl-devel</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Install the libevent-devel rpm package:</span></span><br><span class=\"line\">yum install libevent-devel openssl-devel</span><br></pre></td></tr></table></figure>\n<p>安装好之后使用<code>which turnserver</code>确保安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># which turnserver</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/turnserver</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h2><p>在Coturn编译完成好之后会自动生成一个配置文件的模板，在<code>/usr/local/etc/turnserver.conf.default</code>，感兴趣的小伙伴可以仔细查看里面每一个配置项的含义。这里我们在新建一个新的配置文件<code>/usr/local/etc/turnserver.conf</code>，在这个里面编辑好之后使用<code>turnserver</code>命令会自动寻找到conf文件的位置。分享一个简单的配置文件的格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">relay-device&#x3D;enp1s0f0  &#x2F;&#x2F;绑定的网卡的设备号</span><br><span class=\"line\">listening-ip&#x3D;x.x.x.x &#x2F;&#x2F;内网IP，阿里云腾讯云的机器一般是内网的IP，没有填外网IP也可以</span><br><span class=\"line\">listening-port&#x3D;3478 </span><br><span class=\"line\">relay-ip&#x3D;x.x.x.x  &#x2F;&#x2F;内网IP,阿里云腾讯云的机器一般是内网的IP，没有填外网IP也可以</span><br><span class=\"line\">external-ip&#x3D;x.x.x.x  &#x2F;&#x2F;外网IP，就是外网访问本台服务器的IP地址，这个就是提供给webrtc客户端来传递数据的IP</span><br><span class=\"line\">relay-threads&#x3D;500 </span><br><span class=\"line\">lt-cred-mech    &#x2F;&#x2F;这个要填上，否则不支持webrtc</span><br><span class=\"line\">pidfile&#x3D;&quot;&#x2F;var&#x2F;run&#x2F;turnserver.pid&quot; </span><br><span class=\"line\">min-port&#x3D;49152  &#x2F;&#x2F;虚拟给客户端的端口号，min-max的范围选取要能支撑起你的服务，要不然会出现转发服务器不够用的情况</span><br><span class=\"line\">max-port&#x3D;65535 </span><br><span class=\"line\">user&#x3D;xxx:123456     &#x2F;&#x2F;xxx会用户名，123456是密码</span><br><span class=\"line\">realm&#x3D;AnHui</span><br></pre></td></tr></table></figure>\n<p>保存好之后使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">turnserver -o -a -f </span><br></pre></td></tr></table></figure>\n<p>即可启动Coturn。</p>\n<h2 id=\"验证Coturn的可用性\"><a href=\"#验证Coturn的可用性\" class=\"headerlink\" title=\"验证Coturn的可用性\"></a>验证Coturn的可用性</h2><p>有一个专门的网站可以检查打洞服务器的正确配置与否。<br><a href=\"https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/\">Trickle ICE</a></p>\n<h3 id=\"验证stun\"><a href=\"#验证stun\" class=\"headerlink\" title=\"验证stun\"></a>验证stun</h3><p>输入 <code>stun:x.x.x.x:3478</code><br>得到结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time\tComponent\tType\tFoundation\tProtocol\tAddress\tPort\tPriority</span><br><span class=\"line\">0.002\t1\thost\t886443856\tudp\t10.80.1.131\t49469\t126 | 32542 | 255</span><br><span class=\"line\">0.104\t1\thost\t2052453280\ttcp\t10.80.1.131\t9\t90 | 32542 | 255</span><br><span class=\"line\">0.288\t1\tsrflx\t2643034245\tudp\t112.27.203.124\t49469\t100 | 32542 | 255</span><br><span class=\"line\">0.312\tDone</span><br><span class=\"line\">0.313</span><br></pre></td></tr></table></figure>\n<p>看到<code>srflx</code>后面就是你的电脑的外网IP，表示打洞成功。</p>\n<h3 id=\"验证turn\"><a href=\"#验证turn\" class=\"headerlink\" title=\"验证turn\"></a>验证turn</h3><p>输入 <code>turn:x.x.x.x:3478</code>,<code>username:</code>,<code>password</code><br>得到结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.003\t1\thost\t886443856\tudp\t10.80.1.131\t55831\t126 | 32542 | 255</span><br><span class=\"line\">0.104\t1\thost\t2052453280\ttcp\t10.80.1.131\t9\t90 | 32542 | 255</span><br><span class=\"line\">0.534\t1\tsrflx\t2643034245\tudp\t112.27.203.124\t55831\t100 | 32542 | 255</span><br><span class=\"line\">0.614\t1\trelay\t3676437432\tudp\tx.x.x.x\t56631\t2 | 32542 | 255</span><br><span class=\"line\">0.878\tDone</span><br><span class=\"line\">0.880</span><br></pre></td></tr></table></figure>\n<p>看到<code>relay</code>后面就是你的服务器的外网IP，表示可以使用Coturn的turn服务器进行转发。同时也可以看见srflx，这说明了turn服务是stun的一个拓展，turn和stun是包含的关系。</p>\n<blockquote>\n<p>Coturn的部署就简单的介绍到这里，如有不对的地方，还望指正，谢谢！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在使用WebRtc时，我们需要打洞服务器来打洞两部设备之间的通信，这里我们采用Coturn库。由于Turn服务器是Stun的一个拓展，Coturn包括了Turn和Stun，所有我们只需要部署Coturn就可以完成WebRtc的打洞环节啦。</p>\n</blockquote>\n<h2 id=\"克隆并安装\"><a href=\"#克隆并安装\" class=\"headerlink\" title=\"克隆并安装\"></a>克隆并安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/coturn/coturn </span><br><span class=\"line\"><span class=\"built_in\">cd</span> coturn </span><br><span class=\"line\">./configure </span><br><span class=\"line\">make </span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>如果你的电脑上没有安装LibEvent2，需要先安装<code>libevent-devel</code>和<code>openssl-devel</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Install the libevent-devel rpm package:</span></span><br><span class=\"line\">yum install libevent-devel openssl-devel</span><br></pre></td></tr></table></figure>\n<p>安装好之后使用<code>which turnserver</code>确保安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># which turnserver</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/turnserver</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h2><p>在Coturn编译完成好之后会自动生成一个配置文件的模板，在<code>/usr/local/etc/turnserver.conf.default</code>，感兴趣的小伙伴可以仔细查看里面每一个配置项的含义。这里我们在新建一个新的配置文件<code>/usr/local/etc/turnserver.conf</code>，在这个里面编辑好之后使用<code>turnserver</code>命令会自动寻找到conf文件的位置。分享一个简单的配置文件的格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">relay-device&#x3D;enp1s0f0  &#x2F;&#x2F;绑定的网卡的设备号</span><br><span class=\"line\">listening-ip&#x3D;x.x.x.x &#x2F;&#x2F;内网IP，阿里云腾讯云的机器一般是内网的IP，没有填外网IP也可以</span><br><span class=\"line\">listening-port&#x3D;3478 </span><br><span class=\"line\">relay-ip&#x3D;x.x.x.x  &#x2F;&#x2F;内网IP,阿里云腾讯云的机器一般是内网的IP，没有填外网IP也可以</span><br><span class=\"line\">external-ip&#x3D;x.x.x.x  &#x2F;&#x2F;外网IP，就是外网访问本台服务器的IP地址，这个就是提供给webrtc客户端来传递数据的IP</span><br><span class=\"line\">relay-threads&#x3D;500 </span><br><span class=\"line\">lt-cred-mech    &#x2F;&#x2F;这个要填上，否则不支持webrtc</span><br><span class=\"line\">pidfile&#x3D;&quot;&#x2F;var&#x2F;run&#x2F;turnserver.pid&quot; </span><br><span class=\"line\">min-port&#x3D;49152  &#x2F;&#x2F;虚拟给客户端的端口号，min-max的范围选取要能支撑起你的服务，要不然会出现转发服务器不够用的情况</span><br><span class=\"line\">max-port&#x3D;65535 </span><br><span class=\"line\">user&#x3D;xxx:123456     &#x2F;&#x2F;xxx会用户名，123456是密码</span><br><span class=\"line\">realm&#x3D;AnHui</span><br></pre></td></tr></table></figure>\n<p>保存好之后使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">turnserver -o -a -f </span><br></pre></td></tr></table></figure>\n<p>即可启动Coturn。</p>\n<h2 id=\"验证Coturn的可用性\"><a href=\"#验证Coturn的可用性\" class=\"headerlink\" title=\"验证Coturn的可用性\"></a>验证Coturn的可用性</h2><p>有一个专门的网站可以检查打洞服务器的正确配置与否。<br><a href=\"https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/\">Trickle ICE</a></p>\n<h3 id=\"验证stun\"><a href=\"#验证stun\" class=\"headerlink\" title=\"验证stun\"></a>验证stun</h3><p>输入 <code>stun:x.x.x.x:3478</code><br>得到结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time\tComponent\tType\tFoundation\tProtocol\tAddress\tPort\tPriority</span><br><span class=\"line\">0.002\t1\thost\t886443856\tudp\t10.80.1.131\t49469\t126 | 32542 | 255</span><br><span class=\"line\">0.104\t1\thost\t2052453280\ttcp\t10.80.1.131\t9\t90 | 32542 | 255</span><br><span class=\"line\">0.288\t1\tsrflx\t2643034245\tudp\t112.27.203.124\t49469\t100 | 32542 | 255</span><br><span class=\"line\">0.312\tDone</span><br><span class=\"line\">0.313</span><br></pre></td></tr></table></figure>\n<p>看到<code>srflx</code>后面就是你的电脑的外网IP，表示打洞成功。</p>\n<h3 id=\"验证turn\"><a href=\"#验证turn\" class=\"headerlink\" title=\"验证turn\"></a>验证turn</h3><p>输入 <code>turn:x.x.x.x:3478</code>,<code>username:</code>,<code>password</code><br>得到结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.003\t1\thost\t886443856\tudp\t10.80.1.131\t55831\t126 | 32542 | 255</span><br><span class=\"line\">0.104\t1\thost\t2052453280\ttcp\t10.80.1.131\t9\t90 | 32542 | 255</span><br><span class=\"line\">0.534\t1\tsrflx\t2643034245\tudp\t112.27.203.124\t55831\t100 | 32542 | 255</span><br><span class=\"line\">0.614\t1\trelay\t3676437432\tudp\tx.x.x.x\t56631\t2 | 32542 | 255</span><br><span class=\"line\">0.878\tDone</span><br><span class=\"line\">0.880</span><br></pre></td></tr></table></figure>\n<p>看到<code>relay</code>后面就是你的服务器的外网IP，表示可以使用Coturn的turn服务器进行转发。同时也可以看见srflx，这说明了turn服务是stun的一个拓展，turn和stun是包含的关系。</p>\n<blockquote>\n<p>Coturn的部署就简单的介绍到这里，如有不对的地方，还望指正，谢谢！</p>\n</blockquote>\n"},{"layout":"post","title":"macOS调整LaunchPad图标大小","date":"2018-11-20T04:30:30.000Z","_content":"> macOS的Launchpad默认图标很大，看起来很不美观，下面是调整图标大小的方法。\n\n## 打开终端输入一下命令\n```bash\n# 调整每列显示图标个数\ndefaults write com.apple.dock springboard-rows -int 7\n\n# 调整每行显示图表个数\ndefaults write com.apple.dock springboard-columns -int 8\n\n# 重启\ndefaults write com.apple.dock ResetLaunchPad -bool TRUE\nkillall Dock\n```\n\n## 调整之后的效果图\n![2018-11-20-lunchpad](/assets/img/2018-11-20-lunchpad.jpeg)\n\n","source":"_posts/2018-11-20-change-mac-lunchpad.markdown","raw":"---\nlayout: post\ntitle:  \"macOS调整LaunchPad图标大小\"\ndate:   2018-11-20 12:30:30\ntags: Tools\n---\n> macOS的Launchpad默认图标很大，看起来很不美观，下面是调整图标大小的方法。\n\n## 打开终端输入一下命令\n```bash\n# 调整每列显示图标个数\ndefaults write com.apple.dock springboard-rows -int 7\n\n# 调整每行显示图表个数\ndefaults write com.apple.dock springboard-columns -int 8\n\n# 重启\ndefaults write com.apple.dock ResetLaunchPad -bool TRUE\nkillall Dock\n```\n\n## 调整之后的效果图\n![2018-11-20-lunchpad](/assets/img/2018-11-20-lunchpad.jpeg)\n\n","slug":"change-mac-lunchpad","published":1,"updated":"2020-08-27T15:28:30.027Z","comments":1,"photos":[],"link":"","_id":"ckecyu4ma0004ke526pqg79vb","content":"<blockquote>\n<p>macOS的Launchpad默认图标很大，看起来很不美观，下面是调整图标大小的方法。</p>\n</blockquote>\n<h2 id=\"打开终端输入一下命令\"><a href=\"#打开终端输入一下命令\" class=\"headerlink\" title=\"打开终端输入一下命令\"></a>打开终端输入一下命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 调整每列显示图标个数</span></span><br><span class=\"line\">defaults write com.apple.dock springboard-rows -int 7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调整每行显示图表个数</span></span><br><span class=\"line\">defaults write com.apple.dock springboard-columns -int 8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">defaults write com.apple.dock ResetLaunchPad -bool TRUE</span><br><span class=\"line\">killall Dock</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调整之后的效果图\"><a href=\"#调整之后的效果图\" class=\"headerlink\" title=\"调整之后的效果图\"></a>调整之后的效果图</h2><p><img src=\"/assets/img/2018-11-20-lunchpad.jpeg\" alt=\"2018-11-20-lunchpad\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>macOS的Launchpad默认图标很大，看起来很不美观，下面是调整图标大小的方法。</p>\n</blockquote>\n<h2 id=\"打开终端输入一下命令\"><a href=\"#打开终端输入一下命令\" class=\"headerlink\" title=\"打开终端输入一下命令\"></a>打开终端输入一下命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 调整每列显示图标个数</span></span><br><span class=\"line\">defaults write com.apple.dock springboard-rows -int 7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调整每行显示图表个数</span></span><br><span class=\"line\">defaults write com.apple.dock springboard-columns -int 8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">defaults write com.apple.dock ResetLaunchPad -bool TRUE</span><br><span class=\"line\">killall Dock</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调整之后的效果图\"><a href=\"#调整之后的效果图\" class=\"headerlink\" title=\"调整之后的效果图\"></a>调整之后的效果图</h2><p><img src=\"/assets/img/2018-11-20-lunchpad.jpeg\" alt=\"2018-11-20-lunchpad\"></p>\n"},{"layout":"post","title":"在CentOS7上使用Docker和Haproxy部署Emq集群","date":"2019-01-13T14:51:49.000Z","_content":"## 1.安装Docker\n由于yum默认是没有Docker源的，所以安装之前需要先安装Docker源，这一步参照[官方安装文档](https://docs.docker.com/install/linux/docker-ce/ubuntu/)，直接复制黏贴代码即可。\n```bash\n# update yum package index（更新yum索引）\nsudo yum update\n# Install packages to allow yum to install docker（安装相关工具）\nsudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n# set up the stable repository（安装docker stable源）\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n# update yum package index（安装了新的源，所以再次更新索引）\nsudo yum update\n#Install the latest version of Docker CE（这里安装最新的Docker CE版本）\nsudo yum install docker-ce\n```\n朝上面在安装Docker源的那一步在天朝需要**科学上网**，**科学上网**，**科学上网**，说三遍。一番操作之后Docker应该是安装完成了，使用`docker version`命令，没有报错则安装成功。\n```bash\n[root@localhost ~]# docker version\nClient:\n Version:           18.09.1\n API version:       1.39\n Go version:        go1.10.6\n Git commit:        4c52b90\n Built:             Wed Jan  9 19:35:01 2019\n OS/Arch:           linux/amd64\n Experimental:      false\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n```\n使用`sudo systemctl start docker`命令即可启动Docker。\n\n## 2.使用Docker启动两个emqttd容器\n这里我在Docker hub（需要科学上网）找到了一个别人已经构建好的镜像[tldzyx/emqttd](https://hub.docker.com/r/tldzyx/emqttd)（访问需要科学上网）。\n我们拉下来只有后分别启动`emq1`和`emq2`的容器。\n```bash\n# 下载镜像\ndocker pull tldzyx/emqttd\n# 启动emq1节点($emqttd_img是刚才pull的emqttd镜像的ID，通过docker images查看)\ndocker run -tid --name emq1 $emqttd_img\n# 启动emq2节点\ndocker run -tid --name emq2 $emqttd_img\n```\n这样的话我们在docker中已经启动了两个emq节点，现在我们需要讲两个节点连接起来。\n首先我们先进入节点emq1中，查看emq1节点的地址。\n使用一下命令\n```bash\n# 进入emq1节点中，相当于ssh登录到到了emq1虚拟机上\nsudo docker exec -it emq1 sh \n# 查看节点地址\nsudo emqttd_ctl status\n# /opt/emqttd $ emqttd_ctl status\n# Node '579193a0262d@172.17.0.2' is started\n# emqttd 2.3.8 is running\n\n# 退出\nexit\n```\n可以看到emq1节点的地址是`579193a0262d@172.17.0.2`，紧接着我们进入第二个节点emq2中，\n```bash\n# 登录emq2\nsudo docker exec -it emq2 sh\n# 寻找emq1，是emq1加入集群\nsudo emqttd_ctl cluster join 579193a0262d@172.17.0.2\n# 验证是否成功\nsudo emqttd_ctl cluster status\n# Cluster status: [{running_nodes,['a5ac028fba1e@172.17.0.3',\n                                 '579193a0262d@172.17.0.2']}]\n```\n显而易见我们已经将两个节点加入到同一个集群中了。\n\n## 3.使用Haproxy负载均衡两个节点\n首先我们安装Haproxy\n```bash\nsudo yum install -y haproxy\n```\n紧接着我们使用利用这个拉取的镜像去构建一个我们自己的镜像。\n```bash\nmkdir emqtt-haproxy-docker\ncd emqtt-haproxy-docker\ntouch haproxy.cfg\n# 修改haproxy.cfg内容如下(将IP地址改成emq1,emq2的ip地址)\n# 一些默认参数\ndefaults\n  log                     global\n  option                  dontlognull\n  option http-server-close\n  retries                 3\n  timeout http-request    10s\n  timeout queue           1m\n  timeout connect         10s\n  timeout client          1m\n  timeout server          1m\n  timeout http-keep-alive 10s\n  timeout check           10s\n# 负载均衡mqtt的tcp接口\nfrontend emqtt-front\n  bind *:1883\n  mode tcp\n  default_backend emqtt-backend\n\nbackend emqtt-backend\n   balance roundrobin\n   server emq1 172.17.0.2:1883 check\n   server emq2 172.17.0.2:1883 check\n# 负载均衡mqtt的http管理员界面\nfrontend emqtt-admin-front\n  bind *:18083\n  mode http\n  default_backend emqtt-admin-backend\n\nbackend emqtt-admin-backend\n  mode http\n  balance roundrobin\n  server emq1 172.17.0.2:18083 check\n  server emq2 172.17.0.3:18083 check\n```\n接下来我们使用一个Dockerfile来构建\n```bash\ntouch Dockerfile\n\n# 修改Dockerfile内容如下：\nFROM haproxy:latest > Dockerfile\nCOPY haproxy.cfg /usr/local/etc/haproxy/haproxy.cfg >> Dockerfile\n\n# 使用下面的命令构建新的镜像\ndocker build -t emqtt-haproxy .\n```\n这样我们使用`sudo docker ps`可以查看到我们刚才构建好的镜像,即`emqtt-haproxy`\n```bash\n[root@localhost ~]# docker  images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nemqtt-haproxy       latest              249538bcbccb        12 hours ago        72MB\nhaproxy             latest              d23194a3929a        4 days ago          72MB\nmytomcat            latest              685e1c839eac        2 months ago        720MB\nsebp/elk            latest              2fbf0a30426d        2 months ago        1.45GB\ncentos              7                   75835a67d134        3 months ago        200MB\ntldzyx/emqttd       latest              6e7f1fc919fb        8 months ago        78.9MB\nboldt/coturn        latest              2c927afe2958        17 months ago       189MB\n```\n下面来尝试启动代理服务器来负载均衡两个节点\n```bash\ndocker run -it --rm --name haproxy-syntax-check emqtt-haproxy haproxy -c -f /usr/local/etc/haproxy/haproxy.cfg\n\n# 请指定端口映射1833是tcp服务，18083是管理员界面dashboard\ndocker run -d --name emqtt-running-haproxy -p 1883:1883 -p 18083:18083 emqtt-haproxy\n```\n\n大功告成，在浏览器中输入 `http://your-server-ip:18083` ，登陆后即可查看emq集群的运行状态。\n\n![emq_node](/assets/img/2019-01-13-emq-node.png)","source":"_posts/2019-01-13-centos-install-emqttd-cluster.markdown","raw":"---\nlayout: post\ntitle:  \"在CentOS7上使用Docker和Haproxy部署Emq集群\"\ndate:   2019-01-13 22:51:49\ntags: Emq\n---\n## 1.安装Docker\n由于yum默认是没有Docker源的，所以安装之前需要先安装Docker源，这一步参照[官方安装文档](https://docs.docker.com/install/linux/docker-ce/ubuntu/)，直接复制黏贴代码即可。\n```bash\n# update yum package index（更新yum索引）\nsudo yum update\n# Install packages to allow yum to install docker（安装相关工具）\nsudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n# set up the stable repository（安装docker stable源）\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n# update yum package index（安装了新的源，所以再次更新索引）\nsudo yum update\n#Install the latest version of Docker CE（这里安装最新的Docker CE版本）\nsudo yum install docker-ce\n```\n朝上面在安装Docker源的那一步在天朝需要**科学上网**，**科学上网**，**科学上网**，说三遍。一番操作之后Docker应该是安装完成了，使用`docker version`命令，没有报错则安装成功。\n```bash\n[root@localhost ~]# docker version\nClient:\n Version:           18.09.1\n API version:       1.39\n Go version:        go1.10.6\n Git commit:        4c52b90\n Built:             Wed Jan  9 19:35:01 2019\n OS/Arch:           linux/amd64\n Experimental:      false\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n```\n使用`sudo systemctl start docker`命令即可启动Docker。\n\n## 2.使用Docker启动两个emqttd容器\n这里我在Docker hub（需要科学上网）找到了一个别人已经构建好的镜像[tldzyx/emqttd](https://hub.docker.com/r/tldzyx/emqttd)（访问需要科学上网）。\n我们拉下来只有后分别启动`emq1`和`emq2`的容器。\n```bash\n# 下载镜像\ndocker pull tldzyx/emqttd\n# 启动emq1节点($emqttd_img是刚才pull的emqttd镜像的ID，通过docker images查看)\ndocker run -tid --name emq1 $emqttd_img\n# 启动emq2节点\ndocker run -tid --name emq2 $emqttd_img\n```\n这样的话我们在docker中已经启动了两个emq节点，现在我们需要讲两个节点连接起来。\n首先我们先进入节点emq1中，查看emq1节点的地址。\n使用一下命令\n```bash\n# 进入emq1节点中，相当于ssh登录到到了emq1虚拟机上\nsudo docker exec -it emq1 sh \n# 查看节点地址\nsudo emqttd_ctl status\n# /opt/emqttd $ emqttd_ctl status\n# Node '579193a0262d@172.17.0.2' is started\n# emqttd 2.3.8 is running\n\n# 退出\nexit\n```\n可以看到emq1节点的地址是`579193a0262d@172.17.0.2`，紧接着我们进入第二个节点emq2中，\n```bash\n# 登录emq2\nsudo docker exec -it emq2 sh\n# 寻找emq1，是emq1加入集群\nsudo emqttd_ctl cluster join 579193a0262d@172.17.0.2\n# 验证是否成功\nsudo emqttd_ctl cluster status\n# Cluster status: [{running_nodes,['a5ac028fba1e@172.17.0.3',\n                                 '579193a0262d@172.17.0.2']}]\n```\n显而易见我们已经将两个节点加入到同一个集群中了。\n\n## 3.使用Haproxy负载均衡两个节点\n首先我们安装Haproxy\n```bash\nsudo yum install -y haproxy\n```\n紧接着我们使用利用这个拉取的镜像去构建一个我们自己的镜像。\n```bash\nmkdir emqtt-haproxy-docker\ncd emqtt-haproxy-docker\ntouch haproxy.cfg\n# 修改haproxy.cfg内容如下(将IP地址改成emq1,emq2的ip地址)\n# 一些默认参数\ndefaults\n  log                     global\n  option                  dontlognull\n  option http-server-close\n  retries                 3\n  timeout http-request    10s\n  timeout queue           1m\n  timeout connect         10s\n  timeout client          1m\n  timeout server          1m\n  timeout http-keep-alive 10s\n  timeout check           10s\n# 负载均衡mqtt的tcp接口\nfrontend emqtt-front\n  bind *:1883\n  mode tcp\n  default_backend emqtt-backend\n\nbackend emqtt-backend\n   balance roundrobin\n   server emq1 172.17.0.2:1883 check\n   server emq2 172.17.0.2:1883 check\n# 负载均衡mqtt的http管理员界面\nfrontend emqtt-admin-front\n  bind *:18083\n  mode http\n  default_backend emqtt-admin-backend\n\nbackend emqtt-admin-backend\n  mode http\n  balance roundrobin\n  server emq1 172.17.0.2:18083 check\n  server emq2 172.17.0.3:18083 check\n```\n接下来我们使用一个Dockerfile来构建\n```bash\ntouch Dockerfile\n\n# 修改Dockerfile内容如下：\nFROM haproxy:latest > Dockerfile\nCOPY haproxy.cfg /usr/local/etc/haproxy/haproxy.cfg >> Dockerfile\n\n# 使用下面的命令构建新的镜像\ndocker build -t emqtt-haproxy .\n```\n这样我们使用`sudo docker ps`可以查看到我们刚才构建好的镜像,即`emqtt-haproxy`\n```bash\n[root@localhost ~]# docker  images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nemqtt-haproxy       latest              249538bcbccb        12 hours ago        72MB\nhaproxy             latest              d23194a3929a        4 days ago          72MB\nmytomcat            latest              685e1c839eac        2 months ago        720MB\nsebp/elk            latest              2fbf0a30426d        2 months ago        1.45GB\ncentos              7                   75835a67d134        3 months ago        200MB\ntldzyx/emqttd       latest              6e7f1fc919fb        8 months ago        78.9MB\nboldt/coturn        latest              2c927afe2958        17 months ago       189MB\n```\n下面来尝试启动代理服务器来负载均衡两个节点\n```bash\ndocker run -it --rm --name haproxy-syntax-check emqtt-haproxy haproxy -c -f /usr/local/etc/haproxy/haproxy.cfg\n\n# 请指定端口映射1833是tcp服务，18083是管理员界面dashboard\ndocker run -d --name emqtt-running-haproxy -p 1883:1883 -p 18083:18083 emqtt-haproxy\n```\n\n大功告成，在浏览器中输入 `http://your-server-ip:18083` ，登陆后即可查看emq集群的运行状态。\n\n![emq_node](/assets/img/2019-01-13-emq-node.png)","slug":"centos-install-emqttd-cluster","published":1,"updated":"2020-08-27T15:28:30.028Z","comments":1,"photos":[],"link":"","_id":"ckecyu4mb0005ke52dx6mao43","content":"<h2 id=\"1-安装Docker\"><a href=\"#1-安装Docker\" class=\"headerlink\" title=\"1.安装Docker\"></a>1.安装Docker</h2><p>由于yum默认是没有Docker源的，所以安装之前需要先安装Docker源，这一步参照<a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">官方安装文档</a>，直接复制黏贴代码即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># update yum package index（更新yum索引）</span></span><br><span class=\"line\">sudo yum update</span><br><span class=\"line\"><span class=\"comment\"># Install packages to allow yum to install docker（安装相关工具）</span></span><br><span class=\"line\">sudo yum install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br><span class=\"line\"><span class=\"comment\"># set up the stable repository（安装docker stable源）</span></span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\"># update yum package index（安装了新的源，所以再次更新索引）</span></span><br><span class=\"line\">sudo yum update</span><br><span class=\"line\"><span class=\"comment\">#Install the latest version of Docker CE（这里安装最新的Docker CE版本）</span></span><br><span class=\"line\">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n<p>朝上面在安装Docker源的那一步在天朝需要<strong>科学上网</strong>，<strong>科学上网</strong>，<strong>科学上网</strong>，说三遍。一番操作之后Docker应该是安装完成了，使用<code>docker version</code>命令，没有报错则安装成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker version</span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:           18.09.1</span><br><span class=\"line\"> API version:       1.39</span><br><span class=\"line\"> Go version:        go1.10.6</span><br><span class=\"line\"> Git commit:        4c52b90</span><br><span class=\"line\"> Built:             Wed Jan  9 19:35:01 2019</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Experimental:      <span class=\"literal\">false</span></span><br><span class=\"line\">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br></pre></td></tr></table></figure>\n<p>使用<code>sudo systemctl start docker</code>命令即可启动Docker。</p>\n<h2 id=\"2-使用Docker启动两个emqttd容器\"><a href=\"#2-使用Docker启动两个emqttd容器\" class=\"headerlink\" title=\"2.使用Docker启动两个emqttd容器\"></a>2.使用Docker启动两个emqttd容器</h2><p>这里我在Docker hub（需要科学上网）找到了一个别人已经构建好的镜像<a href=\"https://hub.docker.com/r/tldzyx/emqttd\">tldzyx/emqttd</a>（访问需要科学上网）。<br>我们拉下来只有后分别启动<code>emq1</code>和<code>emq2</code>的容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载镜像</span></span><br><span class=\"line\">docker pull tldzyx/emqttd</span><br><span class=\"line\"><span class=\"comment\"># 启动emq1节点($emqttd_img是刚才pull的emqttd镜像的ID，通过docker images查看)</span></span><br><span class=\"line\">docker run -tid --name emq1 <span class=\"variable\">$emqttd_img</span></span><br><span class=\"line\"><span class=\"comment\"># 启动emq2节点</span></span><br><span class=\"line\">docker run -tid --name emq2 <span class=\"variable\">$emqttd_img</span></span><br></pre></td></tr></table></figure>\n<p>这样的话我们在docker中已经启动了两个emq节点，现在我们需要讲两个节点连接起来。<br>首先我们先进入节点emq1中，查看emq1节点的地址。<br>使用一下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入emq1节点中，相当于ssh登录到到了emq1虚拟机上</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it emq1 sh </span><br><span class=\"line\"><span class=\"comment\"># 查看节点地址</span></span><br><span class=\"line\">sudo emqttd_ctl status</span><br><span class=\"line\"><span class=\"comment\"># /opt/emqttd $ emqttd_ctl status</span></span><br><span class=\"line\"><span class=\"comment\"># Node &#x27;579193a0262d@172.17.0.2&#x27; is started</span></span><br><span class=\"line\"><span class=\"comment\"># emqttd 2.3.8 is running</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 退出</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<p>可以看到emq1节点的地址是<code>579193a0262d@172.17.0.2</code>，紧接着我们进入第二个节点emq2中，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录emq2</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it emq2 sh</span><br><span class=\"line\"><span class=\"comment\"># 寻找emq1，是emq1加入集群</span></span><br><span class=\"line\">sudo emqttd_ctl cluster join 579193a0262d@172.17.0.2</span><br><span class=\"line\"><span class=\"comment\"># 验证是否成功</span></span><br><span class=\"line\">sudo emqttd_ctl cluster status</span><br><span class=\"line\"><span class=\"comment\"># Cluster status: [&#123;running_nodes,[&#x27;a5ac028fba1e@172.17.0.3&#x27;,</span></span><br><span class=\"line\">                                 <span class=\"string\">&#x27;579193a0262d@172.17.0.2&#x27;</span>]&#125;]</span><br></pre></td></tr></table></figure>\n<p>显而易见我们已经将两个节点加入到同一个集群中了。</p>\n<h2 id=\"3-使用Haproxy负载均衡两个节点\"><a href=\"#3-使用Haproxy负载均衡两个节点\" class=\"headerlink\" title=\"3.使用Haproxy负载均衡两个节点\"></a>3.使用Haproxy负载均衡两个节点</h2><p>首先我们安装Haproxy</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y haproxy</span><br></pre></td></tr></table></figure>\n<p>紧接着我们使用利用这个拉取的镜像去构建一个我们自己的镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir emqtt-haproxy-docker</span><br><span class=\"line\"><span class=\"built_in\">cd</span> emqtt-haproxy-docker</span><br><span class=\"line\">touch haproxy.cfg</span><br><span class=\"line\"><span class=\"comment\"># 修改haproxy.cfg内容如下(将IP地址改成emq1,emq2的ip地址)</span></span><br><span class=\"line\"><span class=\"comment\"># 一些默认参数</span></span><br><span class=\"line\">defaults</span><br><span class=\"line\">  <span class=\"built_in\">log</span>                     global</span><br><span class=\"line\">  option                  dontlognull</span><br><span class=\"line\">  option http-server-close</span><br><span class=\"line\">  retries                 3</span><br><span class=\"line\">  timeout http-request    10s</span><br><span class=\"line\">  timeout queue           1m</span><br><span class=\"line\">  timeout connect         10s</span><br><span class=\"line\">  timeout client          1m</span><br><span class=\"line\">  timeout server          1m</span><br><span class=\"line\">  timeout http-keep-alive 10s</span><br><span class=\"line\">  timeout check           10s</span><br><span class=\"line\"><span class=\"comment\"># 负载均衡mqtt的tcp接口</span></span><br><span class=\"line\">frontend emqtt-front</span><br><span class=\"line\">  <span class=\"built_in\">bind</span> *:1883</span><br><span class=\"line\">  mode tcp</span><br><span class=\"line\">  default_backend emqtt-backend</span><br><span class=\"line\"></span><br><span class=\"line\">backend emqtt-backend</span><br><span class=\"line\">   balance roundrobin</span><br><span class=\"line\">   server emq1 172.17.0.2:1883 check</span><br><span class=\"line\">   server emq2 172.17.0.2:1883 check</span><br><span class=\"line\"><span class=\"comment\"># 负载均衡mqtt的http管理员界面</span></span><br><span class=\"line\">frontend emqtt-admin-front</span><br><span class=\"line\">  <span class=\"built_in\">bind</span> *:18083</span><br><span class=\"line\">  mode http</span><br><span class=\"line\">  default_backend emqtt-admin-backend</span><br><span class=\"line\"></span><br><span class=\"line\">backend emqtt-admin-backend</span><br><span class=\"line\">  mode http</span><br><span class=\"line\">  balance roundrobin</span><br><span class=\"line\">  server emq1 172.17.0.2:18083 check</span><br><span class=\"line\">  server emq2 172.17.0.3:18083 check</span><br></pre></td></tr></table></figure>\n<p>接下来我们使用一个Dockerfile来构建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch Dockerfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改Dockerfile内容如下：</span></span><br><span class=\"line\">FROM haproxy:latest &gt; Dockerfile</span><br><span class=\"line\">COPY haproxy.cfg /usr/<span class=\"built_in\">local</span>/etc/haproxy/haproxy.cfg &gt;&gt; Dockerfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用下面的命令构建新的镜像</span></span><br><span class=\"line\">docker build -t emqtt-haproxy .</span><br></pre></td></tr></table></figure>\n<p>这样我们使用<code>sudo docker ps</code>可以查看到我们刚才构建好的镜像,即<code>emqtt-haproxy</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker  images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">emqtt-haproxy       latest              249538bcbccb        12 hours ago        72MB</span><br><span class=\"line\">haproxy             latest              d23194a3929a        4 days ago          72MB</span><br><span class=\"line\">mytomcat            latest              685e1c839eac        2 months ago        720MB</span><br><span class=\"line\">sebp/elk            latest              2fbf0a30426d        2 months ago        1.45GB</span><br><span class=\"line\">centos              7                   75835a67d134        3 months ago        200MB</span><br><span class=\"line\">tldzyx/emqttd       latest              6e7f1fc919fb        8 months ago        78.9MB</span><br><span class=\"line\">boldt/coturn        latest              2c927afe2958        17 months ago       189MB</span><br></pre></td></tr></table></figure>\n<p>下面来尝试启动代理服务器来负载均衡两个节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm --name haproxy-syntax-check emqtt-haproxy haproxy -c -f /usr/<span class=\"built_in\">local</span>/etc/haproxy/haproxy.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请指定端口映射1833是tcp服务，18083是管理员界面dashboard</span></span><br><span class=\"line\">docker run -d --name emqtt-running-haproxy -p 1883:1883 -p 18083:18083 emqtt-haproxy</span><br></pre></td></tr></table></figure>\n\n<p>大功告成，在浏览器中输入 <code>http://your-server-ip:18083</code> ，登陆后即可查看emq集群的运行状态。</p>\n<p><img src=\"/assets/img/2019-01-13-emq-node.png\" alt=\"emq_node\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-安装Docker\"><a href=\"#1-安装Docker\" class=\"headerlink\" title=\"1.安装Docker\"></a>1.安装Docker</h2><p>由于yum默认是没有Docker源的，所以安装之前需要先安装Docker源，这一步参照<a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">官方安装文档</a>，直接复制黏贴代码即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># update yum package index（更新yum索引）</span></span><br><span class=\"line\">sudo yum update</span><br><span class=\"line\"><span class=\"comment\"># Install packages to allow yum to install docker（安装相关工具）</span></span><br><span class=\"line\">sudo yum install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br><span class=\"line\"><span class=\"comment\"># set up the stable repository（安装docker stable源）</span></span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\"># update yum package index（安装了新的源，所以再次更新索引）</span></span><br><span class=\"line\">sudo yum update</span><br><span class=\"line\"><span class=\"comment\">#Install the latest version of Docker CE（这里安装最新的Docker CE版本）</span></span><br><span class=\"line\">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n<p>朝上面在安装Docker源的那一步在天朝需要<strong>科学上网</strong>，<strong>科学上网</strong>，<strong>科学上网</strong>，说三遍。一番操作之后Docker应该是安装完成了，使用<code>docker version</code>命令，没有报错则安装成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker version</span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:           18.09.1</span><br><span class=\"line\"> API version:       1.39</span><br><span class=\"line\"> Go version:        go1.10.6</span><br><span class=\"line\"> Git commit:        4c52b90</span><br><span class=\"line\"> Built:             Wed Jan  9 19:35:01 2019</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Experimental:      <span class=\"literal\">false</span></span><br><span class=\"line\">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br></pre></td></tr></table></figure>\n<p>使用<code>sudo systemctl start docker</code>命令即可启动Docker。</p>\n<h2 id=\"2-使用Docker启动两个emqttd容器\"><a href=\"#2-使用Docker启动两个emqttd容器\" class=\"headerlink\" title=\"2.使用Docker启动两个emqttd容器\"></a>2.使用Docker启动两个emqttd容器</h2><p>这里我在Docker hub（需要科学上网）找到了一个别人已经构建好的镜像<a href=\"https://hub.docker.com/r/tldzyx/emqttd\">tldzyx/emqttd</a>（访问需要科学上网）。<br>我们拉下来只有后分别启动<code>emq1</code>和<code>emq2</code>的容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载镜像</span></span><br><span class=\"line\">docker pull tldzyx/emqttd</span><br><span class=\"line\"><span class=\"comment\"># 启动emq1节点($emqttd_img是刚才pull的emqttd镜像的ID，通过docker images查看)</span></span><br><span class=\"line\">docker run -tid --name emq1 <span class=\"variable\">$emqttd_img</span></span><br><span class=\"line\"><span class=\"comment\"># 启动emq2节点</span></span><br><span class=\"line\">docker run -tid --name emq2 <span class=\"variable\">$emqttd_img</span></span><br></pre></td></tr></table></figure>\n<p>这样的话我们在docker中已经启动了两个emq节点，现在我们需要讲两个节点连接起来。<br>首先我们先进入节点emq1中，查看emq1节点的地址。<br>使用一下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入emq1节点中，相当于ssh登录到到了emq1虚拟机上</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it emq1 sh </span><br><span class=\"line\"><span class=\"comment\"># 查看节点地址</span></span><br><span class=\"line\">sudo emqttd_ctl status</span><br><span class=\"line\"><span class=\"comment\"># /opt/emqttd $ emqttd_ctl status</span></span><br><span class=\"line\"><span class=\"comment\"># Node &#x27;579193a0262d@172.17.0.2&#x27; is started</span></span><br><span class=\"line\"><span class=\"comment\"># emqttd 2.3.8 is running</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 退出</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<p>可以看到emq1节点的地址是<code>579193a0262d@172.17.0.2</code>，紧接着我们进入第二个节点emq2中，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录emq2</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it emq2 sh</span><br><span class=\"line\"><span class=\"comment\"># 寻找emq1，是emq1加入集群</span></span><br><span class=\"line\">sudo emqttd_ctl cluster join 579193a0262d@172.17.0.2</span><br><span class=\"line\"><span class=\"comment\"># 验证是否成功</span></span><br><span class=\"line\">sudo emqttd_ctl cluster status</span><br><span class=\"line\"><span class=\"comment\"># Cluster status: [&#123;running_nodes,[&#x27;a5ac028fba1e@172.17.0.3&#x27;,</span></span><br><span class=\"line\">                                 <span class=\"string\">&#x27;579193a0262d@172.17.0.2&#x27;</span>]&#125;]</span><br></pre></td></tr></table></figure>\n<p>显而易见我们已经将两个节点加入到同一个集群中了。</p>\n<h2 id=\"3-使用Haproxy负载均衡两个节点\"><a href=\"#3-使用Haproxy负载均衡两个节点\" class=\"headerlink\" title=\"3.使用Haproxy负载均衡两个节点\"></a>3.使用Haproxy负载均衡两个节点</h2><p>首先我们安装Haproxy</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y haproxy</span><br></pre></td></tr></table></figure>\n<p>紧接着我们使用利用这个拉取的镜像去构建一个我们自己的镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir emqtt-haproxy-docker</span><br><span class=\"line\"><span class=\"built_in\">cd</span> emqtt-haproxy-docker</span><br><span class=\"line\">touch haproxy.cfg</span><br><span class=\"line\"><span class=\"comment\"># 修改haproxy.cfg内容如下(将IP地址改成emq1,emq2的ip地址)</span></span><br><span class=\"line\"><span class=\"comment\"># 一些默认参数</span></span><br><span class=\"line\">defaults</span><br><span class=\"line\">  <span class=\"built_in\">log</span>                     global</span><br><span class=\"line\">  option                  dontlognull</span><br><span class=\"line\">  option http-server-close</span><br><span class=\"line\">  retries                 3</span><br><span class=\"line\">  timeout http-request    10s</span><br><span class=\"line\">  timeout queue           1m</span><br><span class=\"line\">  timeout connect         10s</span><br><span class=\"line\">  timeout client          1m</span><br><span class=\"line\">  timeout server          1m</span><br><span class=\"line\">  timeout http-keep-alive 10s</span><br><span class=\"line\">  timeout check           10s</span><br><span class=\"line\"><span class=\"comment\"># 负载均衡mqtt的tcp接口</span></span><br><span class=\"line\">frontend emqtt-front</span><br><span class=\"line\">  <span class=\"built_in\">bind</span> *:1883</span><br><span class=\"line\">  mode tcp</span><br><span class=\"line\">  default_backend emqtt-backend</span><br><span class=\"line\"></span><br><span class=\"line\">backend emqtt-backend</span><br><span class=\"line\">   balance roundrobin</span><br><span class=\"line\">   server emq1 172.17.0.2:1883 check</span><br><span class=\"line\">   server emq2 172.17.0.2:1883 check</span><br><span class=\"line\"><span class=\"comment\"># 负载均衡mqtt的http管理员界面</span></span><br><span class=\"line\">frontend emqtt-admin-front</span><br><span class=\"line\">  <span class=\"built_in\">bind</span> *:18083</span><br><span class=\"line\">  mode http</span><br><span class=\"line\">  default_backend emqtt-admin-backend</span><br><span class=\"line\"></span><br><span class=\"line\">backend emqtt-admin-backend</span><br><span class=\"line\">  mode http</span><br><span class=\"line\">  balance roundrobin</span><br><span class=\"line\">  server emq1 172.17.0.2:18083 check</span><br><span class=\"line\">  server emq2 172.17.0.3:18083 check</span><br></pre></td></tr></table></figure>\n<p>接下来我们使用一个Dockerfile来构建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch Dockerfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改Dockerfile内容如下：</span></span><br><span class=\"line\">FROM haproxy:latest &gt; Dockerfile</span><br><span class=\"line\">COPY haproxy.cfg /usr/<span class=\"built_in\">local</span>/etc/haproxy/haproxy.cfg &gt;&gt; Dockerfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用下面的命令构建新的镜像</span></span><br><span class=\"line\">docker build -t emqtt-haproxy .</span><br></pre></td></tr></table></figure>\n<p>这样我们使用<code>sudo docker ps</code>可以查看到我们刚才构建好的镜像,即<code>emqtt-haproxy</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker  images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">emqtt-haproxy       latest              249538bcbccb        12 hours ago        72MB</span><br><span class=\"line\">haproxy             latest              d23194a3929a        4 days ago          72MB</span><br><span class=\"line\">mytomcat            latest              685e1c839eac        2 months ago        720MB</span><br><span class=\"line\">sebp/elk            latest              2fbf0a30426d        2 months ago        1.45GB</span><br><span class=\"line\">centos              7                   75835a67d134        3 months ago        200MB</span><br><span class=\"line\">tldzyx/emqttd       latest              6e7f1fc919fb        8 months ago        78.9MB</span><br><span class=\"line\">boldt/coturn        latest              2c927afe2958        17 months ago       189MB</span><br></pre></td></tr></table></figure>\n<p>下面来尝试启动代理服务器来负载均衡两个节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm --name haproxy-syntax-check emqtt-haproxy haproxy -c -f /usr/<span class=\"built_in\">local</span>/etc/haproxy/haproxy.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请指定端口映射1833是tcp服务，18083是管理员界面dashboard</span></span><br><span class=\"line\">docker run -d --name emqtt-running-haproxy -p 1883:1883 -p 18083:18083 emqtt-haproxy</span><br></pre></td></tr></table></figure>\n\n<p>大功告成，在浏览器中输入 <code>http://your-server-ip:18083</code> ，登陆后即可查看emq集群的运行状态。</p>\n<p><img src=\"/assets/img/2019-01-13-emq-node.png\" alt=\"emq_node\"></p>\n"},{"layout":"post","title":"Npm设置淘宝源","date":"2019-10-13T14:21:49.000Z","_content":"\n```bash\nnpm config set registry https://registry.npm.taobao.org  # just so easy\n```","source":"_posts/2019-11-13-npm-set-taobao-repo.markdown","raw":"---\nlayout: post\ntitle:  \"Npm设置淘宝源\"\ndate:   2019-10-13 22:21:49\ntags: NodeJs\n---\n\n```bash\nnpm config set registry https://registry.npm.taobao.org  # just so easy\n```","slug":"npm-set-taobao-repo","published":1,"updated":"2020-08-27T15:28:30.029Z","comments":1,"photos":[],"link":"","_id":"ckecyu4mc0008ke52ef701wcl","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org  <span class=\"comment\"># just so easy</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org  <span class=\"comment\"># just so easy</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckecyu4m10000ke522x0bgke9","tag_id":"ckecyu4m80002ke529fr28qd6","_id":"ckecyu4mc0007ke522frj0d79"},{"post_id":"ckecyu4m70001ke52bp8cgur8","tag_id":"ckecyu4mb0006ke521xhz8irx","_id":"ckecyu4mf000cke526azchx79"},{"post_id":"ckecyu4ma0004ke526pqg79vb","tag_id":"ckecyu4mf000dke529mqcdef7","_id":"ckecyu4mg000gke52bsxh4ycj"},{"post_id":"ckecyu4mb0005ke52dx6mao43","tag_id":"ckecyu4mf000fke52aucm0dfl","_id":"ckecyu4mg000ike52dqvg1sne"},{"post_id":"ckecyu4mc0008ke52ef701wcl","tag_id":"ckecyu4mg000hke522jilgtpj","_id":"ckecyu4mg000kke5223c39l5y"}],"Tag":[{"name":"Scala","_id":"ckecyu4m80002ke529fr28qd6"},{"name":"WebRtc","_id":"ckecyu4mb0006ke521xhz8irx"},{"name":"Life","_id":"ckecyu4me000ake52c67w4kja"},{"name":"Tools","_id":"ckecyu4mf000dke529mqcdef7"},{"name":"Emq","_id":"ckecyu4mf000fke52aucm0dfl"},{"name":"NodeJs","_id":"ckecyu4mg000hke522jilgtpj"},{"name":"Algorithm","_id":"ckecyu4mg000jke523y522cc6"}]}}